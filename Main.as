package  {	import com.hurlant.*;	import flash.display.*;	import flash.events.*;	import com.hurlant.crypto.hash.SHA256;	import com.hurlant.crypto.hash.HMAC;	import com.hurlant.util.Hex;	import com.adobe.serialization.json.JSON;	import flash.utils.ByteArray;	import flash.net.*;		public class Main extends MovieClip {				var timestamp:Date;		var timestampFormatted:String;		var hashString:String;		var teamNameDataLoader:URLLoader;		var teamNameDataReq:URLRequest;		var teamNameData:Array;		var voteLoader:URLLoader;		var voteReq:URLRequest;		var voteData:Object;		public function Main() {			// constructor code			addEventListener(MouseEvent.CLICK, handleClick);			addEventListener(Event.ADDED_TO_STAGE, handleAddedToStage);		}				public function handleAddedToStage( e:Event ) : void		{			loadTeamNameData( );		}						public function handleClick( e:Event ) : void		{			switch( e.target.name )			{				case "hashBtn":					this.timestamp = new Date( );					hashString = makeHash( );					hashOutField.text = hashString;					break;									case "submitBtn":					submitVote( );					break;			}		}				public function submitVote( e:Event = null ) : void		{			voteReq = new URLRequest( "http://stage.fb.millercoors.com/millerlite/fantasycentral/TeamTossUpData/SubmitVote" );			voteReq.method = URLRequestMethod.POST;			var o:Object = new Object( );			o.Winner = winnerField.text;			o.Loser = loserField.text;			o.Timestamp = timestampFormatted;			o.Hash = hashString;			voteReq.data = o;			voteLoader = new URLLoader( voteReq );			voteLoader.addEventListener( Event.COMPLETE, handleVoteServiceResponse );		}				public function handleVoteServiceResponse( e:Event )		{			trace( e.target.data );			responseField.text = e.target.data;			voteData = JSON.decode( e.target.data );			//trace( teamNameData[ 0 ].TeamName );		}				public function loadTeamNameData( )		{			teamNameDataReq = new URLRequest( "http://stage.fb.millercoors.com/millerlite/fantasycentral/TeamTossUpData/GetTeams" );			teamNameDataLoader = new URLLoader( teamNameDataReq );			teamNameDataLoader.addEventListener( Event.COMPLETE, handleTeamNameDataResponse );		}				public function handleTeamNameDataResponse( e:Event )		{			teamDataField.text = e.target.data;			teamNameData = JSON.decode( e.target.data );			trace( teamNameData[ 0 ].TeamName );		}				public function makeHash( ) : String		{			var hourStr:String;			var modStr:String;			var str:String;						if( this.timestamp.getUTCHours( ) < 12 )			{				hourStr = this.timestamp.getUTCHours( ).toString( );				modStr = "AM";			}			else if( this.timestamp.getUTCHours( ) == 12 )			{				hourStr = "12";				modStr = "PM";			}			else			{				var h:int = this.timestamp.getUTCHours( ) - 12;				hourStr = h.toString( );				modStr = "PM";			}						timestampFormatted = "'" + this.timestamp.getUTCMonth( ) + "/" +			this.timestamp.getUTCDay( ) + "/" +			this.timestamp.getUTCFullYear( ) + " " +			hourStr + ":" +			this.timestamp.getUTCMinutes( ) + ":" +			this.timestamp.getUTCSeconds( ) + " " +			modStr + "'"						timestampField.text = timestampFormatted;						str = "Winner:" + winnerField.text + ",Loser:" + loserField.text + 			",Timestamp:" + timestampFormatted;						hashInField.text = str;						var hashFunc = new SHA256( );			var hmac = new HMAC( hashFunc );						//make a byteArray of the hash key			var key:ByteArray;			key = Hex.toArray( Hex.fromString( "millerfcbeer298472" ) );			//make a byte array of the string to be hashed			var hashSource:ByteArray;			hashSource = Hex.toArray(Hex.fromString( str ));			//make a byte array to hold the resulting hash			var hash:ByteArray;			hash = hmac.compute( key, hashSource );						var ret:String = Hex.fromArray( hash );			return ret;		}	}	}